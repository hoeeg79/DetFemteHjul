// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using LanguageDto;
//
//    var welcome = Welcome.FromJson(jsonString);

namespace LanguageDto
{
    using System;
    using System.Collections.Generic;

    using System.Globalization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;

    public class Welcome
    {
        public Dictionary<string, LanguageList> translation { get; set; }

        [JsonProperty("transliteration")]
        public Dictionary<string, Transliteration> Transliteration { get; set; }

        [JsonProperty("dictionary")]
        public Dictionary<string, LanguageList> Dictionary { get; set; }
    }

    public class LanguageList
    {
        [JsonProperty("name")]
        public string Name { get; set; }

        [JsonProperty("nativeName")]
        public string NativeName { get; set; }

        [JsonProperty("dir")]
        public Dir Dir { get; set; }

        [JsonProperty("translations", NullValueHandling = NullValueHandling.Ignore)]
        public LanguageList[] Translations { get; set; }

        [JsonProperty("code", NullValueHandling = NullValueHandling.Ignore)]
        public string Code { get; set; }

        [JsonProperty("toScripts", NullValueHandling = NullValueHandling.Ignore)]
        public LanguageList[] ToScripts { get; set; }
    }

    public  class Transliteration
    {
        [JsonProperty("name")]
        public string Name { get; set; }

        [JsonProperty("nativeName")]
        public string NativeName { get; set; }

        [JsonProperty("scripts")]
        public LanguageList[] Scripts { get; set; }
    }

    public enum Dir { Ltr, Rtl };


    public static class Serialize
    {
        public static string ToJson(this Welcome self) => JsonConvert.SerializeObject(self, LanguageDto.Converter.Settings);
    }

    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                DirConverter.Singleton,
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }

    internal class DirConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(Dir) || t == typeof(Dir?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "ltr":
                    return Dir.Ltr;
                case "rtl":
                    return Dir.Rtl;
            }
            throw new Exception("Cannot unmarshal type Dir");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (Dir)untypedValue;
            switch (value)
            {
                case Dir.Ltr:
                    serializer.Serialize(writer, "ltr");
                    return;
                case Dir.Rtl:
                    serializer.Serialize(writer, "rtl");
                    return;
            }
            throw new Exception("Cannot marshal type Dir");
        }

        public static readonly DirConverter Singleton = new DirConverter();
    }
}